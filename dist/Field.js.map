{"version":3,"sources":["../dist-esnext/Field.js"],"names":["positionIsValid","curry","field","p","x","length","y","nearPositions","pos","range","flatten","remove","map","i","j","validNearPos","filter","openPosition","assoc","markPosition","markedPos","updatePos","marked","isValidConfig","fieldConfig","totalPositions","width","height","bombs","allPositions","reduce","a","b","concat","countNearBombs","countedField","isBomb","nearBombs","getRandomPos","Math","floor","random","bombPos","config","getBombedField","last","getEmptyField","widthRange","heightRange","newPos","opened","isValid","clone","getInitialField","Error","emptyField","bombedField","logField","indexColor","resetColor","firstLine","f","index","console","log","row","col","colIndex","line","numBombs","numBombsString"],"mappings":"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","file":"Field.js","sourcesContent":["import R from 'ramda';\n/**\n * Checks if field has position.\n */\nconst positionIsValid = R.curry((field, p) => {\n    return p.x >= 0 && p.x < field.length && p.y >= 0 && p.y < field[0].length;\n});\n/**\n * Receives a position and return his near positions\n * args {IPositionArgs}\n * returns {IPositionArgs[]}\n */\nconst nearPositions = (pos) => {\n    const range = R.range(-1, 2);\n    /**\n     * Get a 3x3 position array with the position and all the near positions then remove the position itseft\n     */\n    return R.flatten(R.remove(4, 1, range.map(i => range.map(j => {\n        return { x: pos.x + i, y: pos.y + j };\n    }))));\n};\nconst validNearPos = R.curry((field, pos) => R.filter(positionIsValid(field), nearPositions(pos)));\n/**\n * Set position.opened to true\n * @param pos position\n */\nconst openPosition = (pos) => R.assoc('opened', true, pos);\nconst markPosition = (pos) => {\n    const markedPos = updatePos(pos);\n    if (markedPos.marked === 2)\n        markedPos.marked = 0;\n    else\n        markedPos.marked++;\n    return markedPos;\n};\nconst isValidConfig = (fieldConfig) => {\n    const totalPositions = fieldConfig.width * fieldConfig.height;\n    return totalPositions > fieldConfig.bombs ? true : false;\n};\nconst allPositions = (field) => field.reduce((a, b) => a.concat(b));\nconst countNearBombs = (field) => {\n    const countedField = field;\n    allPositions(field).map(pos => {\n        if (pos.isBomb)\n            validNearPos(field, pos).map(p => countedField[p.x][p.y].nearBombs++);\n    }); // TODO immutable\n    return countedField;\n};\n// TODO use ptz-math and help with any math method you need\nconst getRandomPos = (field, fieldConfig) => {\n    const width = Math.floor((fieldConfig.width - 1) * Math.random() + 1);\n    const height = Math.floor((fieldConfig.height - 1) * Math.random() + 1);\n    return field[width][height];\n};\nconst bombPos = (field, config) => {\n    const pos = getRandomPos(field, config);\n    if (pos.isBomb) {\n        return bombPos(field, config);\n    }\n    pos.isBomb = true;\n    return field;\n};\n/**\n * Populate new field with bombs\n */\nconst getBombedField = (field, config) => R.last(R.range(0, config.bombs).map(() => bombPos(field, config)));\nconst getEmptyField = (fieldConfig) => {\n    const widthRange = R.range(0, fieldConfig.width);\n    const heightRange = R.range(0, fieldConfig.height);\n    return widthRange.map(i => heightRange.map(j => newPos(i, j)));\n};\n/**\n * Get a new position\n */\nconst newPos = (x, y) => {\n    return {\n        x, y, isBomb: false, nearBombs: 0,\n        opened: false, marked: 0, isValid: true\n    };\n};\nconst updatePos = (pos) => R.clone(pos);\nconst getInitialField = (fieldConfig) => {\n    if (!isValidConfig(fieldConfig))\n        throw new Error('Invalid field configuration');\n    const emptyField = getEmptyField(fieldConfig);\n    const bombedField = getBombedField(emptyField, fieldConfig);\n    return countNearBombs(bombedField);\n};\n// TODO break in small functions\nfunction logField(field) {\n    const countedField = field;\n    const indexColor = '\\x1b[37m';\n    const resetColor = '\\x1b[0m';\n    let firstLine = '    ';\n    field.map((f, index) => firstLine += ' ' + (index + 1) + '  ');\n    console.log(indexColor + firstLine + resetColor);\n    let row;\n    field.map((col, colIndex) => {\n        var line = '|';\n        row = '   ';\n        col.map((pos, index) => {\n            if (index === 0 && colIndex === 0)\n                line = line;\n            if (index === 0)\n                line = ' ' + indexColor + (colIndex + 1) + resetColor + ' |';\n            if (countedField[pos.x][pos.y].opened) {\n                if (countedField[pos.x][pos.y].isBomb) {\n                    line += '\\x1b[31m * ' + resetColor;\n                    row += '---';\n                }\n                else {\n                    const numBombs = countedField[pos.x][pos.y].nearBombs;\n                    let numBombsString;\n                    switch (numBombs) {\n                        case 1:\n                            numBombsString = '\\x1b[34m' + numBombs;\n                            break;\n                        case 2:\n                            numBombsString = '\\x1b[32m' + numBombs;\n                            break;\n                        case 3:\n                            numBombsString = '\\x1b[33m' + numBombs;\n                            break;\n                        case 4:\n                            numBombsString = '\\x1b[35m' + numBombs;\n                            break;\n                        case 5:\n                            numBombsString = '\\x1b[36m' + numBombs;\n                            break;\n                        case 7:\n                            numBombsString = '\\x1b[31m' + numBombs;\n                            break;\n                        case 8:\n                            numBombsString = '\\x1b[37m' + numBombs;\n                            break;\n                        default:\n                            numBombsString = '\\x1b[37m' + numBombs;\n                    }\n                    line += ' ' + numBombsString + resetColor + ' ';\n                    row += '---';\n                }\n            }\n            else {\n                line += '   ';\n                row += '---';\n            }\n            line += '|';\n            row += '-';\n        });\n        console.log(row);\n        console.log(line);\n    });\n    console.log(row + '\\n');\n}\nexport { allPositions, getInitialField, getEmptyField, getBombedField, countNearBombs, logField, markPosition, nearPositions, newPos, openPosition, positionIsValid, validNearPos, updatePos };\n//# sourceMappingURL=Field.js.map"]}